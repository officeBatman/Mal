declare int by 1:int, `+1`:int->int, `-1`:int->int
such that | `+1` (`-1` x) -> x | `-1` (`+1` x) -> x 

declare 0 = `-1` 1
declare 2 = `+1` 1
declare 3 = `+1` 2
declare 4 = `+1` 3
declare 5 = `+1` 4
declare 6 = `+1` 5
declare 7 = `+1` 6
declare 8 = `+1` 7
declare 9 = `+1` 8

declare sign by zero:sign, positive:sign, negetive:sign

declare cmp = match
	| =0 -> zero
	| `-1` x -> negetive
	| `+1` x -> positive

let `+` (x:int) (y:int) :int =
	match cmp y with 
	| zero -> x 
	| positive -> `+` (`+1` x) (`-1` y) 
	| negetive -> `+` (`-1` x) (`+1` y)
let `-` (x:int) (y:int) :int =
	match cmp y with 
	| zero -> x 
	| positive -> `-` (`-1` x) (`-1` y) 
	| negetive -> `-` (`+1` x) (`+1` y)
declare `~-` y = 0 - y

let `*` (x:int) (y:int) =
	match cmp y with
	| zero -> 0
	| positive -> `+` x (`*` x (`-1` y))
	| negetive -> `~-` (`*` x (`~-` y))

